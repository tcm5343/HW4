/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package studentregistration;

import java.awt.Color;
import java.util.Locale;
import org.jfree.chart.*;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author miller
 */
public class StudentCharts extends javax.swing.JPanel {

    private final StudentMenu studentMenu;
    
    protected ChartFrame barChartFrame;
    protected ChartFrame pieChartFrame;

    // constructor
    public StudentCharts(Mockup mockup) {
        studentMenu = mockup.studentMenu;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * displays the total number of students in each degree status category
     */
    protected void createBarChart() {
        System.out.println("createBarChart() called");
        
        // fill the chart with data
        DefaultCategoryDataset barchartDataset = new DefaultCategoryDataset();
        barchartDataset.setValue(countDegreeStatusOccurences("full-time"), "", "full-time");
        barchartDataset.setValue(countDegreeStatusOccurences("part-time"), "", "part-time");
        barchartDataset.setValue(countDegreeStatusOccurences("non-degree"), "", "non-degree");
        barchartDataset.setValue(countDegreeStatusOccurences("provisional"), "", "provisional");
        
        JFreeChart barChart = ChartFactory.createBarChart("Student Degree Status",
                "Degree Status", "Number of Students", barchartDataset,
                PlotOrientation.VERTICAL, false, false, false);

        CategoryPlot barChartCatPlot = barChart.getCategoryPlot();
        barChartCatPlot.setRangeGridlinePaint(Color.BLACK);

        barChartFrame = new ChartFrame("Degree Status", barChart, true);
        barChartFrame.setVisible(true);
        barChartFrame.setSize(750, 500);
    }

    protected void createPieChart() {
        System.out.println("createPieChart() called");
        
        // fill the chart with data
        DefaultPieDataset pieChartDataset = new DefaultPieDataset();
        pieChartDataset.setValue("IST", countMajorOccurences("IST"));
        pieChartDataset.setValue("Business", countMajorOccurences("Business"));
        pieChartDataset.setValue("HDFS", countMajorOccurences("HDFS"));
        pieChartDataset.setValue("Nursing", countMajorOccurences("Nursing"));
        
        JFreeChart pieChart = ChartFactory.createPieChart("Student Majors", pieChartDataset, true, true, Locale.US);
        
        // add the chart to a frame to be displayed to the user
        pieChartFrame = new ChartFrame("Degree Status", pieChart, true);
        pieChartFrame.setVisible(true);
        pieChartFrame.setSize(750, 500);
    }

    private int countMajorOccurences(String major) {
        int result = 0;
        // counts the occurences of the degree status
        for (StudentRecord studentRecord : studentMenu.studentRecordData) {
            if (studentRecord.getMajor().equals(major)) {
                result++;
            }
        }
        return result;
    }

    private int countDegreeStatusOccurences(String degreeStatus) {
        int result = 0;
        // counts the occurences of the major
        for (StudentRecord studentRecord : studentMenu.studentRecordData) {
            if (studentRecord.getDegreeStatus().equals(degreeStatus)) {
                result++;
            }
        }
        return result;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
